package BSimChemicalFieldTest;

import java.awt.Color;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;

import javax.vecmath.Vector3d;

import processing.core.PGraphics3D;
import bsim.BSim;
import bsim.BSimChemicalField;
import bsim.BSimTicker;
import bsim.BSimUtils;
import bsim.export.*;
import bsim.draw.BSimP3DDrawer;
import bsim.export.BSimLogger;
import bsim.particle.BSimBacterium;
import java.util.Random;
/**
 * Varies fractional number of A and B type bacteria while keeping constant bacteria numbers
 */


public class BSimChemicalFieldTest {

	/*********************************************************
	 * Simulation Definition
	 *********************************************************/
	public static void main(String[] args) {
		
/*
 * The counter is used to produce several samples of the same conditions (e.i. keeping the same numbers of 
 * bacteria A and B)
 * This is to account for the inherent randomness of the fire diffuse model. 
 */
		int counter = 1;
//places the percentage of bacteria A to 0 for the first run
		double A_ratio = 0.5;
//cycles through different percentages of bacteria A, from 0% to 100%
		while (A_ratio<=1) {	
//here the number of samples with the same percentages is set. here it is set for 20 runs. 
			while (counter<21   ) {		
				/*********************************************************
				 * Create a new simulation object and set up simulation settings
				 */
				final int bounds = 64;
				BSim sim = new BSim();		
				sim.setDt(1);//default is 0.01
				sim.setTimeFormat("0.00");
				sim.setSolid(true,true,true);
				sim.setBound(bounds,bounds,bounds);
				sim.setSimulationTime(300);		// Total simulation time [sec] reduced to 300 to minimise run time. 
					
				/*********************************************************
				 * Set up the chemical field
				 */
				boolean average_over_sphere = true;
				final int boxno = bounds;
				final int xyboxno = bounds; //changing boxes sizes and nos changes the graph. can be due to accuracy of the results. change is slight
				final double c = 5e9; // molecules (controls intensity with no major graph difference in morphology)
				final double decayRate = 5e-3; // 4.44e-4 good Can regulate decay rate with pulse to get the top hat shape. 
				final double diffusivity = 0.075; // (microns)^2/sec
//here the different thresholds are set. 
				final double threshold_A = 3e2; //Threshold of FDF chemical 7e8 for cfgl
				final double threshold_B = 3e20;
				final double quantityadd = 5e9; //Quanitity of chemical added
				final double firstwave = 180; // Time slot where first wave stops
				final double secondwave = 1440; // Time slot for second wave beginning
				final BSimChemicalField field = new BSimChemicalField(sim, new int[]{xyboxno,xyboxno,boxno}, diffusivity, decayRate);
		//		field.linearZ(0,c);
/*
 * Here the names of the files produced are created. This is needed to prevent the simulations to overwrite  
 */

				String order = String.valueOf(counter);
				String Ratio_name = String.valueOf(A_ratio*100);
				Ratio_name = Ratio_name.substring(0,(Ratio_name.length()-2));
				String Intensity_Position_Name = "B(T)=3e7 and A(T)=3e2  Ecoli_test_" + order + ".csv";
				String Total_Intensity_Name = "A_conc_" + Ratio_name + "_" + order + ".csv";
				
				//Set temporary number and total number of bacteria
//here the number of bacteria and relative ratios of bacteria types in the colony. 
				int totbac = 1000;
				double ratio_A = A_ratio;
				double ratio_B = 1-ratio_A;
				int total_A = (int)(ratio_A*totbac);
				int total_B = (int)(ratio_B*totbac);
				
				
				//For even space
				double tempnum = 1/(2*totbac);
				//For packed
				//double tempnum = 1;
				
				/*********************************************************
				 * Set up the bacteria
				 */
				
				
//two types of bacteria identities are made here. 				
				final Vector<BSimBacterium> bacteria_A = new Vector<BSimBacterium>();
				final Vector<BSimBacterium> bacteria_B = new Vector<BSimBacterium>();
//This or statement in the while loop is needed for all 1000 bacteria to be assigned as A type or B type bacteria
				while(bacteria_A.size() < total_A || bacteria_B.size() < total_B) {
//Coordinates used to randomly position the bacteria. x00 type coordinates are for A type bacteria and X00 types 
//are for B type bacteria.

//Different coordinates are needed so that the bacteria do not try to be placed on top of each other. 
					 double theta = 2 * Math.PI * Math.random();
					 double phi = Math.acos(2 * Math.random() - 1);
					 
					 double theta_B = 2 * Math.PI * Math.random();
					 double phi_B = Math.acos(2 * Math.random() - 1);
					 
					 double Radius_factor = 0.5;
					 double displacement = 0;
					 
					 double rand = Math.cbrt(Math.random());
					 double x00 = rand*(Math.sin(phi) * Math.cos(theta)*(Radius_factor)*sim.getBound().x); 		 
					 double y00 = rand*Math.sin(phi) * Math.sin(theta)*(Radius_factor)*sim.getBound().y;
					 double z00 = rand*Math.cos(phi)*(Radius_factor)*sim.getBound().z;
					 
					 double rad = 0.05;
					 double rad2 = 0.95;
					 
					 double X00 = rand*(Math.sin(phi_B) * Math.cos(theta_B)*(Radius_factor)*sim.getBound().x); 		 
					 double Y00 = rand*Math.sin(phi_B) * Math.sin(theta_B)*(Radius_factor)*sim.getBound().y;
					 double Z00 = rand*Math.cos(phi_B)*(Radius_factor)*sim.getBound().z;
					
					 
// identical to original code but uses threshold A 
					BSimBacterium p = new BSimBacterium(sim, 
						//This uses random bacteria	
							//Spherical Test 	
							new Vector3d(0.5*bounds+(x00)+displacement, 
									0.5*bounds+y00, 
									0.5*bounds+z00)) {
						// This uses the even distancing
							//new Vector3d(/*0*Math.random()*/0.5*sim.getBound().x, 
							//	/*0*Math.random()*/0.5*sim.getBound().y, 
							//	/*0*Math.random()*/0.5*(tempnum)*sim.getBound().z)) {
						// Bacteria move etc. and also add chemical to the global field.
						public void action() {
							super.action();
							/*if (Math.random() < sim.getDt())
								field.addQuantity(position, 1e9);*/
							//Condition of Pulse
							//if ((sim.getTime() > 60 && sim.getTime() < 64 && (x00/sim.getBound().x < rad && y00/sim.getBound().y < rad && z00/sim.getBound().z < rad && x00/sim.getBound().x > -rad && y00/sim.getBound().y > -rad && z00/sim.getBound().z > -rad))  || (field.getConc(position) > 1e4 && sim.getTime() < 300 && field.getConc(position)<5e9))
								//field.addQuantity(position, 5e9);
								//System.out.println("Fire");
							if (( sim.getTime()%1440 > 0 && sim.getTime()%1440 < 4 && (x00/sim.getBound().x < rad && y00/sim.getBound().y < rad && z00/sim.getBound().z < rad && x00/sim.getBound().x > -rad && y00/sim.getBound().y > -rad && z00/sim.getBound().z > -rad))  || (field.getConc(position) > threshold_A && sim.getTime() < firstwave && field.getConc(position)<quantityadd))
								field.addQuantity(position, quantityadd);
							//if (field.getConc(position) < threshold/2 && sim.getTime() > firstwave)
								//field.addQuantity(position, 0.001*quantityadd);
							if (field.getConc(position) > threshold_A && sim.getTime()>secondwave && field.getConc(position) < quantityadd)
								field.addQuantity(position, quantityadd);
										
				//position is the box position and q is the quantity of chemical released in the box. makes curves more prominent up to a certain point	
							/*if (sim.getTime() > 4800 && (sim.getTime()) % 10 == 0 && sim.getTime() < 8400 && Math.random() > 0.99)
								field.addQuantity(position, 5e9)
							;*/
						} 
					};
// identical to original code but uses threshold B 
					BSimBacterium b = new BSimBacterium(sim, 
							//This uses random bacteria	
								
								//Spherical Test
								new Vector3d(0.5*bounds+(X00)-displacement, 
										0.5*bounds+Y00, 
										0.5*bounds+Z00)) {
							// This uses the even distancing
								//new Vector3d(/*0*Math.random()*/0.5*sim.getBound().x, 
								//	/*0*Math.random()*/0.5*sim.getBound().y, 
								//	/*0*Math.random()*/0.5*(tempnum)*sim.getBound().z)) {
							// Bacteria move etc. and also add chemical to the global field.
							public void action() {
								super.action();
//								/*if (Math.random() < sim.getDt())
//									field.addQuantity(position, 1e9);*/
//								
//								//Condition of Pulse
//								
//								//if ((sim.getTime() > 60 && sim.getTime() < 64 && (x00/sim.getBound().x < rad && y00/sim.getBound().y < rad && z00/sim.getBound().z < rad && x00/sim.getBound().x > -rad && y00/sim.getBound().y > -rad && z00/sim.getBound().z > -rad))  || (field.getConc(position) > 1e4 && sim.getTime() < 300 && field.getConc(position)<5e9))
//									//field.addQuantity(position, 5e9);
//									//System.out.println("Fire");
								if (( sim.getTime()%1440 > 0 && sim.getTime()%1440 < 4 && (X00/sim.getBound().x < rad && Y00/sim.getBound().y < rad && Z00/sim.getBound().z < rad && X00/sim.getBound().x > -rad && Y00/sim.getBound().y > -rad && Z00/sim.getBound().z > -rad))  || (field.getConc(position) > threshold_B && sim.getTime() < firstwave && field.getConc(position)<quantityadd))
									field.addQuantity(position, quantityadd);
//								//if (field.getConc(position) < threshold/2 && sim.getTime() > firstwave)
//									//field.addQuantity(position, 0.001*quantityadd);
								if (field.getConc(position) > threshold_B && sim.getTime()>secondwave && field.getConc(position) < quantityadd)
									field.addQuantity(position, quantityadd);
//											
//					//position is the box position and q is the quantity of chemical released in the box. makes curves more prominent up to a certain point		
//											
//								
//								
//								/*if (sim.getTime() > 4800 && (sim.getTime()) % 10 == 0 && sim.getTime() < 8400 && Math.random() > 0.99)
//									field.addQuantity(position, 5e9)
//								;*/
							} 
						};
					
					// Chemotaxis according to chemical field strength
//p is assigned to A type bacteria and b is assigned to B type. 
						p.setGoal(field);
//this if statement was added to prevent A's overlapping with B's and the .size() restrain the number of bacteria
//to the values specified by total_A and total_B
						if(!p.intersection(bacteria_A) && !p.intersection(bacteria_B) && bacteria_A.size()<total_A) bacteria_A.add(p);
						b.setGoal(field);
						if (!b.intersection(bacteria_A) && !b.intersection(bacteria_B) && bacteria_B.size()<total_B) bacteria_B.add(b);
					
					//Update the temporary number for different position for new bacteria
					//Evenly Spread
					//tempnum = tempnum + 1/totbac;
					//Packed
					tempnum = tempnum + 0.015;
				}
				
				System.out.println("total A is " + bacteria_A.size() + " total B is " + bacteria_B.size() );	
				/*********************************************************
				 * Set the ticker, define what happens each time step
				 */
				sim.setTicker(new BSimTicker() {

// for some reason I had to run the actions together as supposed to trying to group them into one big bacteria group
					public void tick() {
						for(BSimBacterium b : bacteria_B) {
							b.action();		
							//b.updatePosition();
						}
						for(BSimBacterium a : bacteria_A) {
							a.action();		
							//b.updatePosition();
						}
						field.update();
						 
					}
					
				});
		
								
				/*********************************************************
				 * Set the drawer for the simulation
				 */
				sim.setDrawer(new BSimP3DDrawer(sim, 600,600) {
					@Override
					public void scene(PGraphics3D p3d) {	
						draw(field, Color.YELLOW, (float)(0.1*255/3e8));						
						for(BSimBacterium p : bacteria_A) draw(p, Color.BLUE);
						for(BSimBacterium b : bacteria_B) draw(b, Color.RED);
					}
				});	
				
				String resultsDir = BSimUtils.generateDirectoryPath("./results/Changing Bacteria percentage 1.3/Bacteria A percentage " + Ratio_name + "/" );
				
					BSimLogger logger = new BSimLogger(sim, resultsDir + Intensity_Position_Name) {
					
					@Override
					
					public void before() {
						super.before();
//This part of the code, writes headers for the columns in the .csv files. This was done to allow my Python code
// to read through the csv files. 
//-----------------------------------------------------------------------------------------------------------------------
						String[] number_list = {"time"};
						int Counter = 0;
						while (Counter<32) {
							String c = String.valueOf(Counter);
							number_list = Arrays.copyOf(number_list, number_list.length + 1);
							number_list[number_list.length - 1] =  "Int at " + c;
							Counter++;
						};
						String Number_String = Arrays.toString(number_list);
						//My python code was unable to  read through all of the files, 
						//For some reason this has something to do with not all the columns being titled			
						
						//This line deletes the square brakers of the list. 
						Number_String = Number_String.substring(1,(Number_String.length()-1));
		
						write(Number_String); 
					}
//-----------------------------------------------------------------------------------------------------------------------
					public void during() {
		                // Counter for the number of current collisions
		                //double Intensity = field.getConc(0, 0, 0);
		                //List<Double> intensities = new ArrayList<>();
		                // Loop through the bacteria and count collisions
		                //for (BSimTutorialBacterium p : bacteria){
		                //String intensities = "";
		                String intensities = "";
		                String totchem = "";
		                //At infinity the diffusion should be closer to each next distance
		
		
		                
		                if(average_over_sphere){
		
		                    for(int r = 0; r<boxno/2; r++){
		                        if(r==0){
		                            intensities += "," + (field.getConc(xyboxno/2,xyboxno/2,boxno/2));
		                        }else{
		                            Vector<Double> intensities_on_sphere = new Vector<Double>();
		                            // generate points on a sphere of radius r
		                            final int points_density = 10;
		                            // determine the number of points on the sphere from the density
		                            int points_nb = (int) (points_density* Math.pow(r,2));
		                            // generate the random points
		                            for(int i=0; i<=points_nb;i++){
		                                // x,y,z for points on a sphere
		                                double x = new Random().nextGaussian(0,1);
		                                double y = new Random().nextGaussian(0,1);
		                                double z = new Random().nextGaussian(0,1);
		                                // normalise to a sphere
		                                double normalisation = r/Math.sqrt(x*x + y*y + z*z);
		
		                                // change units to be box index
		                                normalisation *= (float)(boxno)/(float)(bounds);
		
		                                // generate the final x, y and z
		                                x *= normalisation;
		                                y *= normalisation;
		                                z *= normalisation;
		
		
		
		                                // for details on these last few steps, refer to https://www.notion.so/Lab-book-01dac4b0eedd4f47b7bee779863b8507#cf3faa9db8fc4f34a6030758018426e8
		
		                                // round the coordinates up and displaces them to the center of the sim, read the intensity at this point on the sphere and store it
		                                intensities_on_sphere.add(field.getConc((int)(Math.ceil(x) + boxno/2),
		                                                                        (int)(Math.ceil(y) + boxno/2),
		                                                                        (int)(Math.ceil(z) + boxno/2)));
		
		                            }
		
		                            // average over all the points in intensities_on_sphere
		                            double sum = 0;
		                            for(Double v: intensities_on_sphere){
		                                sum += v;
		                            }
		                            // write to file the intensity
		                            intensities += "," + sum/ intensities_on_sphere.size();
		                            totchem += "," + field.totalQuantity();
		                        }
		
		                    }
		
		
		
		                }else{ // give the intensities along the z-axis
		                    for (int i = 0; i < boxno/2; i++) {
		                        //Intensity = field.getConc(0, 0, i);
		                        final int z_index = boxno/2+i;
		                        totchem += "," + field.totalQuantity();
		
		                        intensities += "," + (field.getConc(xyboxno/2,xyboxno/2,boxno/2+i)); // these are supposed to be the indexes of the boxes coordinates, ie boxsize dependent
		                    }
		
		                }
		
		                write(sim.getFormattedTime()  + intensities);
		
		
		
		                //}
		
		                // Write the time and number of collisions to file
		
		            }
		        };
		        sim.addExporter(logger);
		
				sim.addExporter(new BSimLogger(sim, Total_Intensity_Name) {
		
		
				public void before() {
					super.before();
				    	write("Time, Intensity");
				   }
		
		
				public void during() {
		
					write(sim.getFormattedTime() + "," + field.getConc(0,0,0) + ", ");
				   }
		
				});
				
		        // Run the simulation
		
		    //    sim.export();
				sim.preview();
		        System.out.println("End of simulation " + counter + " From concentration [A] = " + bacteria_A.size());
		        counter++;
			}
		counter =1;
		A_ratio+=0.1;
		}
    }
}
